<% layout("/layouts/boilerplate")%>
<script>
  const listingId = "<%=listing._id %>";
</script>
    <body>
        <div class="row mt-3">
            <div class="col-8 offset-3">
    <h3><%=listing.title %></h3>
    </div>
    <div class="card col-6 offset-3 show-card listing-card">
        <img src="<%= listing.image.url %>" class = "card-img-top show-img" alt="listing-image" >
        <div class="card-body">
            <p class="card-text">
              <p><i> Owned by <%= listing.owner.username %></i></p>
              <p><%= listing.description %></p>
              <p>&#8377;<%= listing.price.toLocaleString("en-IN") %></p>
              <p><%= listing.location %> </p>
              <p><%= listing.country %></p>
            </p>           
        </div>
    </div>
    <br>
    
    <div class="btns">
    <a class="btn btn-dark col-1 offset-3 edit-btn" href="/listings/<%= listing._id %>/edit">Edit</a>
    <form method="POST" action="/listings/<%=listing._id%>?_method=DELETE">
        <button class="btn btn-dark offset-5">Delete </button>       
    </div>
    
   </form>
</div>
<hr>

<div class="col-8 offset-3 mb-3">
  <% if(currUser) { %>
    <h4>Leave a review</h4>
    <div class="recordAudio mb-3 mt-3">
      
      <button id="recordButton" class="record-button">Start Recording</button>
      <button id="stopButton" class = "stop-recording-button" disabled>Stop Recording</button>
      <button id="uploadButton" class="upload-to-google-drive-button" disabled>Upload to Google Drive</button>
      <audio id="audioPlayback" controls></audio>
      <p hidden id="fileLink"></p>
      <div id="sentimentResults"></div>
    </div>
    <form action="/listings/<%= listing._id %>/reviews" method="POST" novalidate class="needs-validation">
        
  <div class="mb-3 mt-3">
    <label for="rating" class="form-label">Rating</label>

    <fieldset class="starability-slot">
    
    <input type="radio" id="no-rate" class="input-no-rate" name="review[rating]" value="1" checked aria-label="No rating." />
    <input type="radio" id="first-rate1" name="review[rating]" value="1" />
    <label for="first-rate1" title="Terrible">1 star</label>
    <input type="radio" id="first-rate2" name="review[rating]" value="2" />
    <label for="first-rate2" title="Not good">2 stars</label>
    <input type="radio" id="first-rate3" name="review[rating]" value="3" />
    <label for="first-rate3" title="Average">3 stars</label>
    <input type="radio" id="first-rate4" name="review[rating]" value="4" />
    <label for="first-rate4" title="Very good">4 stars</label>
    <input type="radio" id="first-rate5" name="review[rating]" value="5" />
    <label for="first-rate5" title="Amazing">5 stars</label>
  </fieldset>
  
  </div>
  

        <div class="mb-3 mt-3">
         
            <label for="comment" class="form-label">Comments</label>
            <textarea name="review[comment]" id="comment" cols="30" rows="5" class="form-control" required>
              
            </textarea>
        </div>
       
        <button class="btn btn-outline-dark">Submit</button>
    </form>
    <% } %>
    
    <% if(listing.reviews.length>0){ %>
    <div class="row">
      <p><b>All Reviews</b></p>
        <% for(let review of listing.reviews) { %>
          <div class="card col-5 ms-3 mb-3">
            <div class="card-body">
              <div class="card-title"><%= review.author.username %></div>
              <p class="starability-result card-text" data-rating="<%= review.rating %>"></p>

              <p class="card-text"><%= review.comment %></p>
              <div id="sentimentResults">

               </div>
              </p>
            </div>
            <form method="POST" action="/listings/<%= listing._id %>/reviews/<%= review._id %>?_method=DELETE" class="mb-3">
              <button class="btn btn-sm btn-dark">Delete</button>
            </form>
          </div>
        <% } %>
      </div>  
      <% } %>
</div>
 <script>
  
// let mediaRecorder;
// let audioChunks = [];

// document.getElementById('recordButton').addEventListener('click', async () => {
//     const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
//     mediaRecorder = new MediaRecorder(stream);
//     mediaRecorder.start();

//     mediaRecorder.addEventListener('dataavailable', event => {
//         audioChunks.push(event.data);
//     });

//     mediaRecorder.addEventListener('stop', () => {
//         const audioBlob = new Blob(audioChunks, { type: 'audio/mp3' });
//         const audioUrl = URL.createObjectURL(audioBlob);
//         const audio = document.getElementById('audioPlayback');
//         audio.src = audioUrl;
//         document.getElementById('uploadButton').disabled = false;

//         document.getElementById('uploadButton').addEventListener('click', async () => {
//             try {
//                 const formData = new FormData();
//                 formData.append('audio', audioBlob, 'recording.mp3');
//                 let { id } = listingId; // Ensure 'listingId' is defined in your context
//                 const response = await fetch(`/listings/${id}/uploads`, {
//                     method: 'POST',
//                     body: formData
//                 });

//                 if (!response.ok) {
//                     throw new Error(`HTTP error! status: ${response.status}`);
//                 }

//                 const data = await response.json();

//                 // Show the link to the uploaded file
//                 document.getElementById('fileLink').innerHTML = `<a href="${data.link}" target="_blank">View and Edit File</a>`;

//                 // Display the sentiment analysis results in the comment box
//                 const sentimentHtml = data.sentiment.map(item => {
//                     return `<p>Sentence: ${item.Text}<br>Sentiment: ${item.Sentiment}</p>`;
//                 }).join("");
//                 document.getElementById('commentBox').value = sentimentHtml;  // assuming there is a textarea with id 'commentBox'

//                 document.getElementById('submitButton').disabled = false;

//             } catch (error) {
//                 console.error('Error:', error);
//                 document.getElementById('fileLink').innerText = `Error: ${error.message}`;
//             }
//         });
//     });

//     document.getElementById('stopButton').disabled = false;
//     document.getElementById('recordButton').disabled = true;
// });

// document.getElementById('stopButton').addEventListener('click', () => {
//     mediaRecorder.stop();
//     document.getElementById('stopButton').disabled = true;
//     document.getElementById('recordButton').disabled = false;
// });

// // Submit button event listener
// document.getElementById('submitButton').addEventListener('click', async () => {
//     const commentBox = document.getElementById('commentBox').value;

//     if (commentBox.trim() !== "") {
//         // Send the comment box contents to the server or database here
//         console.log("Submitting comments:", commentBox); // Replace with actual submission code
//     }
// });



// let mediaRecorder;
//         let audioChunks = [];

//         document.getElementById('recordButton').addEventListener('click', async () => {
//             const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
//             mediaRecorder = new MediaRecorder(stream);
//             mediaRecorder.start();

//             mediaRecorder.addEventListener('dataavailable', event => {
//                 audioChunks.push(event.data);
//             });

//             mediaRecorder.addEventListener('stop', () => {
//                 const audioBlob = new Blob(audioChunks, { type: 'audio/mp3' });
//                 const audioUrl = URL.createObjectURL(audioBlob);
//                 const audio = document.getElementById('audioPlayback');
//                 audio.src = audioUrl;
//                 document.getElementById('uploadButton').disabled = false;

//                 document.getElementById('uploadButton').addEventListener('click', async () => {
//                     try {
//                         const formData = new FormData();
//                         formData.append('audio', audioBlob, 'recording.mp3');
//                         let {id} = listingId;
//                         const response = await fetch(`/listings/${id}/uploads`, {
//                             method: 'POST',
//                             body: formData
//                         });

//                         if (!response.ok) {
//                             throw new Error(`HTTP error! status: ${response.status}`);
//                         }

//                         const data = await response.json();
                    
//                         const sentimentArray = data.sentiment;
                        

//                         const midpoint = Math.floor(sentimentArray.length / 2);

                        
//                         sentimentArray.slice(0, midpoint).forEach(sentiment => {


//                           const commentElement = document.getElementById('comment');
//                           const currentContent = commentElement.innerHTML;

//                           commentElement.innerHTML =`${currentContent}${sentiment.Text}`;
//                         });

//                         sentimentArray.slice(midpoint+1 , sentimentArray.length-1).forEach(sentiment =>{
//                             console.log(sentiment.Sentiment ,`:-` , sentiment.Percentage);
//                         })
//                         console.log("Uploaded")
  

            
//                     } catch (error) {
//                         console.error('Error:', error);
//                         document.getElementById('fileLink').innerText = `Error: ${error.message}`;
//                     }
//                 });
//             });

//             document.getElementById('stopButton').disabled = false;
//             document.getElementById('recordButton').disabled = true;
//         });

//         document.getElementById('stopButton').addEventListener('click', () => {
//             mediaRecorder.stop();
//             document.getElementById('stopButton').disabled = true;
//             document.getElementById('recordButton').disabled = false;
            
//                 });


// const Listing = require("../models/listing.js");


let mediaRecorder;
let audioChunks = [];

// Event listener for the record button
document.getElementById('recordButton').addEventListener('click', async () => {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    mediaRecorder = new MediaRecorder(stream);
    mediaRecorder.start();

    mediaRecorder.addEventListener('dataavailable', event => {
        audioChunks.push(event.data);
        
    });

    mediaRecorder.addEventListener('stop', () => {
        const audioBlob = new Blob(audioChunks, { type: 'audio/mp3' });
        const audioUrl = URL.createObjectURL(audioBlob);
        const audio = document.getElementById('audioPlayback');
        audio.src = audioUrl;
        document.getElementById('uploadButton').disabled = false;
    });

    document.getElementById('stopButton').disabled = false;
    document.getElementById('recordButton').disabled = true;
});

document.getElementById('stopButton').addEventListener('click', () => {
    mediaRecorder.stop();
    document.getElementById('stopButton').disabled = true;
    document.getElementById('recordButton').disabled = false;
});

// Adding the upload button event listener only once
document.getElementById('uploadButton').addEventListener('click', async (req,res) => {
    try {
        const formData = new FormData();
        const audioBlob = new Blob(audioChunks, { type: 'audio/mp3' });
        formData.append('audio', audioBlob, 'recording.mp3');
        let  id  = listingId;
        console.log(id);
        // let listingID = await Listing.findById(id); 
        const response = await fetch(`/listings/:${id}/uploads`, {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        const sentimentArray = data.sentiment;
        const midpoint = Math.floor(sentimentArray.length / 2);
        // const arrLength = sentimentArray.length();
        // Process the first half of the sentiments
        sentimentArray.forEach(sentiment => {
            
            if (sentiment.SentenceID != null){
                
                const commentElement = document.getElementById('comment');
                const currentContent = commentElement.innerHTML;
                commentElement.innerHTML = `${currentContent} ${sentiment.Text}`;
            }

        });
        

        // Process the second half of the sentiments
        sentimentArray.forEach(sentiment => {
            if (sentiment.SentenceID == null){
                const sentimentElement = document.getElementById('comment');
                const newElement = sentimentElement.innerHTML;
                sentimentElement.innerHTML = `${newElement} ${sentiment.Sentiment} :- ${sentiment.Percentage}`;
            }
           
        });

        console.log("Uploaded");

    } catch (error) {
        console.error('Error:', error);
        document.getElementById('fileLink').innerText = `Error: ${error.message}`;
    }
});

 </script>

</body>
